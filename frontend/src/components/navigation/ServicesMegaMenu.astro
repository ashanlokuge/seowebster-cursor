---
// ServicesMegaMenu Component - SEOWebster Professional Mega Menu
// Modern, responsive mega menu with exact specifications

// Service data for Core SEO Services
const coreServices = [
  {
    title: "Technical SEO",
    description: "Optimize website structure and performance for search engines",
    icon: "‚öôÔ∏è",
    link: "/services/technical-seo"
  },
  {
    title: "On-Page SEO",
    description: "Optimize content, meta tags, and internal linking structure",
    icon: "üìÑ",
    link: "/services/on-page-seo"
  },
  {
    title: "Off-Page SEO",
    description: "Build quality backlinks and improve domain authority",
    icon: "üîó",
    link: "/services/off-page-seo"
  },
  {
    title: "Local SEO",
    description: "Dominate local search results and attract nearby customers",
    icon: "üìç",
    link: "/services/local-seo"
  },
  {
    title: "Keyword Research",
    description: "Discover high-value keywords with low competition",
    icon: "üîç",
    link: "/services/keyword-research"
  },
  {
    title: "Content Optimization",
    description: "Create SEO-optimized content that ranks and converts",
    icon: "‚úçÔ∏è",
    link: "/services/content-optimization"
  },
  {
    title: "Site Audit",
    description: "Comprehensive analysis of your website's SEO health",
    icon: "‚úÖ",
    link: "/services/site-audit"
  },
  {
    title: "SEO Consultation",
    description: "Expert guidance and strategic planning for growth",
    icon: "üí¨",
    link: "/services/seo-consultation"
  }
];

// Service data for Advanced SEO Services
const advancedServices = [
  {
    title: "Programmatic SEO",
    description: "Scalable SEO using data-driven content generation",
    icon: "ü§ñ",
    link: "/services/programmatic-seo"
  },
  {
    title: "AI-Powered SEO",
    description: "Leverage artificial intelligence for advanced optimization",
    icon: "üß†",
    link: "/services/ai-seo"
  },
  {
    title: "E-commerce SEO",
    description: "Specialized optimization for online stores and marketplaces",
    icon: "üõí",
    link: "/services/ecommerce-seo"
  },
  {
    title: "Enterprise SEO",
    description: "Large-scale SEO strategies for enterprise businesses",
    icon: "üè¢",
    link: "/services/enterprise-seo"
  },
  {
    title: "International SEO",
    description: "Multi-language and multi-region search optimization",
    icon: "üåê",
    link: "/services/international-seo"
  },
  {
    title: "Voice SEO",
    description: "Optimize for voice search and virtual assistants",
    icon: "üé§",
    link: "/services/voice-seo"
  },
  {
    title: "Video SEO",
    description: "Optimize video content for search engine visibility",
    icon: "üé•",
    link: "/services/video-seo"
  },
  {
    title: "Schema Markup",
    description: "Implement structured data for rich search results",
    icon: "üè∑Ô∏è",
    link: "/services/schema-markup"
  }
];

// Category data for the visual summary panel
const categoryData = {
  core: {
    title: "Core SEO Services",
    description: "Essential SEO services to establish your online presence and drive organic growth.",
    image: "üéØ",
    benefits: [
      "Improved search rankings",
      "Increased organic traffic",
      "Better user experience",
      "Higher conversion rates"
    ]
  },
  advanced: {
    title: "Advanced SEO Services",
    description: "Cutting-edge SEO solutions for businesses ready to dominate their market.",
    image: "üöÄ",
    benefits: [
      "Enterprise-level optimization",
      "AI-powered insights",
      "Scalable SEO strategies",
      "Competitive advantage"
    ]
  }
};
---

<!-- Background Overlay for Focus Effect -->
<div class="services-mega-menu-overlay fixed inset-0 bg-black bg-opacity-30 backdrop-blur-sm z-[998] opacity-0 invisible transition-all duration-300 ease-out"></div>

<!-- Mega Menu Container - Perfectly centered relative to viewport -->
<div class="services-mega-menu fixed left-1/2 transform -translate-x-1/2 bg-white shadow-xl z-[1000] opacity-0 invisible transition-all duration-200 ease-in-out" style="top: calc(64px + 20px); width: min(90vw, 1280px); border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.15);">
  <div class="w-full py-6 min-h-[400px] bg-white">
    <div class="flex h-full">
      
      <!-- Column 1: Navigation Categories (Left sidebar) - 200px -->
      <div class="w-[200px] border-r border-gray-200">
        <div class="space-y-1">
          <button 
            class="w-full text-left px-4 py-2.5 transition-all duration-200 hover:bg-gray-50 tab-button active text-[#ff6400] bg-gray-50"
            data-category="core"
          >
            <div class="flex items-center justify-between">
              <span class="font-medium font-sans">Core SEO Services</span>
              <svg class="w-4 h-4 text-[#ff6400]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>
          </button>
          
          <button 
            class="w-full text-left px-4 py-2.5 transition-all duration-200 hover:bg-gray-50 tab-button text-[#272d3e]"
            data-category="advanced"
          >
            <div class="flex items-center justify-between">
              <span class="font-medium font-sans">Advanced SEO Services</span>
              <svg class="w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>
          </button>
        </div>
      </div>
      
      <!-- Light divider -->
      <div class="w-px bg-gray-200"></div>
      
      <!-- Column 2: Services Grid (Middle content) - 640px -->
      <div class="w-[640px] px-6">
        <div class="service-cards" id="core-services">
          <div class="grid grid-cols-2 gap-3">
            {coreServices.map((service) => (
              <a 
                href={service.link}
                class="group p-3 rounded-lg border border-gray-200 bg-white hover:border-[#ff6400] hover:shadow-md transition-all duration-200"
              >
                <div class="flex items-start space-x-3">
                  <div class="flex-shrink-0 w-8 h-8 bg-orange-50 rounded-lg flex items-center justify-center">
                    <span class="text-[#ff6400] text-base">{service.icon}</span>
                  </div>
                  <div class="flex-1 min-w-0">
                    <h4 class="font-bold text-[#272d3e] group-hover:text-[#ff6400] transition-colors duration-200 text-sm mb-1">
                      {service.title}
                    </h4>
                    <p class="text-xs text-gray-600 leading-relaxed">
                      {service.description}
                    </p>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
        
        <div class="service-cards hidden" id="advanced-services">
          <div class="grid grid-cols-2 gap-3">
            {advancedServices.map((service) => (
              <a 
                href={service.link}
                class="group p-3 rounded-lg border border-gray-200 bg-white hover:border-[#ff6400] hover:shadow-md transition-all duration-200"
              >
                <div class="flex items-start space-x-3">
                  <div class="flex-shrink-0 w-8 h-8 bg-gray-50 rounded-lg flex items-center justify-center">
                    <span class="text-[#272d3e] text-base">{service.icon}</span>
                  </div>
                  <div class="flex-1 min-w-0">
                    <h4 class="font-bold text-[#272d3e] group-hover:text-[#ff6400] transition-colors duration-200 text-sm mb-1">
                      {service.title}
                    </h4>
                    <p class="text-xs text-gray-600 leading-relaxed">
                      {service.description}
                    </p>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
      
      <!-- Light divider -->
      <div class="w-px bg-gray-200"></div>
      
      <!-- Column 3: Visual Summary Panel (Right sidebar) - 440px -->
      <div class="w-[440px] px-6">
        <div class="category-description" id="core-description">
          <div class="bg-[#fff3ea] rounded-lg p-5 h-full">
            <!-- Featured Image/Icon -->
            <div class="text-center mb-4">
              <div class="w-16 h-16 bg-white rounded-full flex items-center justify-center mx-auto mb-3 shadow-sm">
                <span class="text-3xl">{categoryData.core.image}</span>
              </div>
              <h3 class="text-lg font-bold text-[#272d3e] mb-2 font-sans">{categoryData.core.title}</h3>
              <p class="text-xs text-gray-600 leading-relaxed">{categoryData.core.description}</p>
            </div>
            
            <!-- Key Benefits Checklist -->
            <div class="space-y-2">
              <h4 class="font-semibold text-[#272d3e] text-sm mb-2">Key Benefits:</h4>
              {categoryData.core.benefits.map((benefit) => (
                <div class="flex items-center space-x-3">
                  <div class="w-4 h-4 bg-[#ff6400] rounded-full flex items-center justify-center flex-shrink-0">
                    <svg class="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                  <span class="text-xs text-[#272d3e] font-medium">{benefit}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        <div class="category-description hidden" id="advanced-description">
          <div class="bg-[#fff3ea] rounded-lg p-5 h-full">
            <!-- Featured Image/Icon -->
            <div class="text-center mb-4">
              <div class="w-16 h-16 bg-white rounded-full flex items-center justify-center mx-auto mb-3 shadow-sm">
                <span class="text-3xl">{categoryData.advanced.image}</span>
              </div>
              <h3 class="text-lg font-bold text-[#272d3e] mb-2 font-sans">{categoryData.advanced.title}</h3>
              <p class="text-xs text-gray-600 leading-relaxed">{categoryData.advanced.description}</p>
            </div>
            
            <!-- Key Benefits Checklist -->
            <div class="space-y-2">
              <h4 class="font-semibold text-[#272d3e] text-sm mb-2">Key Benefits:</h4>
              {categoryData.advanced.benefits.map((benefit) => (
                <div class="flex items-center space-x-3">
                  <div class="w-4 h-4 bg-[#ff6400] rounded-full flex items-center justify-center flex-shrink-0">
                    <svg class="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                  <span class="text-xs text-[#272d3e] font-medium">{benefit}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
      
    </div>
  </div>
</div>

<script>
  // Professional mega menu functionality with improved hover behavior
  document.addEventListener('DOMContentLoaded', function() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const serviceCards = document.querySelectorAll('.service-cards');
    const categoryDescriptions = document.querySelectorAll('.category-description');
    const megaMenuContainer = document.querySelector('.services-mega-menu');
    const megaMenuOverlay = document.querySelector('.services-mega-menu-overlay');
    
    function switchTab(category: string) {
      // Update active tab styling with SEOWebster primary color
      tabButtons.forEach(btn => {
        btn.classList.remove('active', 'text-[#ff6400]', 'bg-gray-50');
        btn.classList.add('text-[#272d3e]');
        const arrow = btn.querySelector('svg');
        if (arrow) {
          arrow.classList.remove('text-[#ff6400]');
          arrow.classList.add('text-gray-400', 'opacity-0');
        }
      });
      
      const activeButton = document.querySelector(`[data-category="${category}"]`);
      if (activeButton) {
        activeButton.classList.add('active', 'text-[#ff6400]', 'bg-gray-50');
        activeButton.classList.remove('text-[#272d3e]');
        const activeArrow = activeButton.querySelector('svg');
        if (activeArrow) {
          activeArrow.classList.remove('text-gray-400', 'opacity-0');
          activeArrow.classList.add('text-[#ff6400]');
        }
      }
      
      // Smooth transition for service cards
      serviceCards.forEach(cards => {
        if (cards instanceof HTMLElement) {
          cards.style.opacity = '0';
          setTimeout(() => {
            cards.classList.add('hidden');
          }, 100);
        }
      });
      
      setTimeout(() => {
        const targetServices = document.getElementById(`${category}-services`);
        if (targetServices) {
          targetServices.classList.remove('hidden');
          targetServices.style.opacity = '1';
        }
      }, 100);
      
      // Smooth transition for category descriptions
      categoryDescriptions.forEach(desc => {
        if (desc instanceof HTMLElement) {
          desc.style.opacity = '0';
          setTimeout(() => {
            desc.classList.add('hidden');
          }, 100);
        }
      });
      
      setTimeout(() => {
        const targetDescription = document.getElementById(`${category}-description`);
        if (targetDescription) {
          targetDescription.classList.remove('hidden');
          targetDescription.style.opacity = '1';
        }
      }, 100);
    }
    
    tabButtons.forEach(button => {
      // Click functionality
      button.addEventListener('click', function(this: HTMLElement) {
        const category = this.getAttribute('data-category');
        if (category) {
          switchTab(category);
        }
      });
      
      // Hover functionality for better UX
      button.addEventListener('mouseenter', function(this: HTMLElement) {
        const category = this.getAttribute('data-category');
        if (category) {
          switchTab(category);
        }
      });
    });

    // Enhanced hover behavior - proper show/hide functionality
    let hideTimeout: number;
    
    // Find the Services dropdown trigger in the navbar
    const servicesDropdownTrigger = document.querySelector('div.relative.group:nth-child(1)') || // First dropdown in navbar
                                    Array.from(document.querySelectorAll('button')).find(btn => 
                                      btn.textContent?.trim().includes('Services')) ||
                                    document.querySelector('.group button:contains("Services")');
    
    // Function to hide mega menu
    function hideMegaMenu() {
      if (megaMenuContainer) {
        megaMenuContainer.classList.add('invisible', 'opacity-0');
        megaMenuContainer.classList.remove('visible', 'opacity-100');
      }
      if (megaMenuOverlay) {
        megaMenuOverlay.classList.add('invisible', 'opacity-0');
        megaMenuOverlay.classList.remove('visible', 'opacity-100');
      }
    }
    
    // Function to show mega menu
    function showMegaMenu() {
      clearTimeout(hideTimeout);
      if (megaMenuContainer) {
        megaMenuContainer.classList.remove('invisible', 'opacity-0');
        megaMenuContainer.classList.add('visible', 'opacity-100');
      }
      if (megaMenuOverlay) {
        megaMenuOverlay.classList.remove('invisible', 'opacity-0');
        megaMenuOverlay.classList.add('visible', 'opacity-100');
      }
    }
    
    // Add hover events to the dropdown trigger (Services button)
    if (servicesDropdownTrigger) {
      servicesDropdownTrigger.addEventListener('mouseenter', function() {
        clearTimeout(hideTimeout);
        showMegaMenu();
      });
      
      servicesDropdownTrigger.addEventListener('mouseleave', function() {
        hideTimeout = setTimeout(hideMegaMenu, 200); // Delay to allow moving to menu
      });
    }
    
    // Add hover events to the mega menu container
    if (megaMenuContainer) {
      megaMenuContainer.addEventListener('mouseenter', function() {
        clearTimeout(hideTimeout);
      });
      
      megaMenuContainer.addEventListener('mouseleave', function() {
        hideMegaMenu(); // Immediate hide when leaving menu
      });
    }
    
    // Add hover events to the overlay
    if (megaMenuOverlay) {
      megaMenuOverlay.addEventListener('mouseleave', function() {
        hideMegaMenu(); // Immediate hide when leaving overlay
      });
    }
    
    // Hide mega menu when clicking outside or moving mouse away
    document.addEventListener('click', function(event) {
      if (megaMenuContainer && 
          !megaMenuContainer.contains(event.target as Node) && 
          !servicesDropdownTrigger?.contains(event.target as Node)) {
        hideMegaMenu();
      }
    });
    
    // Global mouse move listener to hide menu when mouse is far away
    document.addEventListener('mousemove', function(event) {
      if (megaMenuContainer && !megaMenuContainer.classList.contains('invisible')) {
        const menuRect = megaMenuContainer.getBoundingClientRect();
        const triggerRect = servicesDropdownTrigger?.getBoundingClientRect();
        
        // Check if mouse is far from both menu and trigger
        const mouseX = event.clientX;
        const mouseY = event.clientY;
        
        const isNearMenu = mouseX >= menuRect.left - 50 && 
                          mouseX <= menuRect.right + 50 && 
                          mouseY >= menuRect.top - 50 && 
                          mouseY <= menuRect.bottom + 50;
        
        const isNearTrigger = triggerRect && 
                             mouseX >= triggerRect.left - 20 && 
                             mouseX <= triggerRect.right + 20 && 
                             mouseY >= triggerRect.top - 20 && 
                             mouseY <= triggerRect.bottom + 20;
        
        if (!isNearMenu && !isNearTrigger) {
          hideMegaMenu();
        }
      }
    });
  });
</script>

<style>
  /* Enhanced custom styles */
  .tab-button.active {
    background-color: #fff7ed;
    border-left-color: #ff6400;
  }
  
  .service-cards {
    transition: opacity 0.3s ease-in-out;
  }
  
  .category-description {
    transition: opacity 0.3s ease-in-out;
  }
  
  /* Ensure mega menu stays above other content */
  .services-mega-menu {
    position: fixed !important;
    z-index: 1000 !important;
  }
  
  /* Ensure overlay is properly positioned */
  .services-mega-menu-overlay {
    position: fixed !important;
    z-index: 998 !important;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    /* Hide mega menu on mobile */
    .services-mega-menu {
      display: none;
    }
  }
  
  @media (min-width: 769px) and (max-width: 1024px) {
    /* Tablet view - convert to accordion style */
    .services-mega-menu {
      max-width: 100%;
      padding: 0 1rem;
    }
    
    .flex.h-full {
      flex-direction: column;
    }
    
    .w-[200px], .w-[640px], .w-[440px] {
      width: 100%;
    }
    
    .w-px {
      display: none;
    }
  }
  
  @media (min-width: 1025px) {
    /* Desktop - ensure proper centering */
    .services-mega-menu {
      margin-left: auto;
      margin-right: auto;
    }
  }
</style>