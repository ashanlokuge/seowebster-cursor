---
interface Props {
  currentCountry: 'us' | 'lk' | 'au';
  currentPage?: string;
}

const { currentCountry, currentPage = '' } = Astro.props;

const countries = [
  {
    code: 'us',
    name: 'United States',
    flag: 'ðŸ‡ºðŸ‡¸',
    url: `https://seowebster.com${currentPage}`,
    currency: 'USD',
    language: 'English (US)'
  },
  {
    code: 'lk',
    name: 'Sri Lanka',
    flag: 'ðŸ‡±ðŸ‡°',
    url: `https://seowebster.com/lk${currentPage}`,
    currency: 'LKR',
    language: 'English (LK)'
  },
  {
    code: 'au',
    name: 'Australia',
    flag: 'ðŸ‡¦ðŸ‡º',
    url: `https://seowebster.com/au${currentPage}`,
    currency: 'AUD',
    language: 'English (AU)'
  }
];

const currentCountryData = countries.find(c => c.code === currentCountry) || countries[0];
---

<div class="relative inline-block text-left country-switcher">
  <button 
    type="button" 
    class="inline-flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 country-switcher-btn"
    id="country-switcher-button"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-2 text-lg">{currentCountryData.flag}</span>
    <span class="hidden sm:inline">{currentCountryData.name}</span>
    <span class="sm:hidden">{currentCountryData.code.toUpperCase()}</span>
    <svg class="w-4 h-4 ml-2 transition-transform duration-200 country-switcher-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <div 
    class="absolute right-0 z-50 w-72 mt-2 origin-top-right bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible transition-all duration-200 transform scale-95 country-switcher-menu"
    id="country-switcher-menu"
    role="menu" 
    aria-orientation="vertical" 
    aria-labelledby="country-switcher-button"
  >
    <div class="p-2">
      <div class="px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wide border-b border-gray-100 mb-2">
        Choose Your Region
      </div>
      {countries.map((country) => (
        <a
          href={country.url}
          class={`flex items-center px-3 py-3 text-sm rounded-md transition-colors duration-200 ${
            country.code === currentCountry 
              ? 'bg-blue-50 text-blue-700 border border-blue-200' 
              : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
          }`}
          role="menuitem"
        >
          <span class="text-xl mr-3">{country.flag}</span>
          <div class="flex-1">
            <div class="font-medium">{country.name}</div>
            <div class="text-xs text-gray-500">{country.language} â€¢ {country.currency}</div>
          </div>
          {country.code === currentCountry && (
            <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
            </svg>
          )}
        </a>
      ))}
    </div>
    
    <div class="border-t border-gray-100 p-3">
      <div class="text-xs text-gray-500 text-center">
        <p>Prices shown in local currency</p>
        <p>Optimized for your region</p>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('country-switcher-button');
    const menu = document.getElementById('country-switcher-menu');
    const icon = document.querySelector('.country-switcher-icon');
    
    if (button && menu && icon) {
      let isOpen = false;
      
      function toggleMenu() {
        isOpen = !isOpen;
        
        if (isOpen) {
          menu.classList.remove('opacity-0', 'invisible', 'scale-95');
          menu.classList.add('opacity-100', 'visible', 'scale-100');
          icon.style.transform = 'rotate(180deg)';
          button.setAttribute('aria-expanded', 'true');
        } else {
          menu.classList.add('opacity-0', 'invisible', 'scale-95');
          menu.classList.remove('opacity-100', 'visible', 'scale-100');
          icon.style.transform = 'rotate(0deg)';
          button.setAttribute('aria-expanded', 'false');
        }
      }
      
      function closeMenu() {
        isOpen = false;
        menu.classList.add('opacity-0', 'invisible', 'scale-95');
        menu.classList.remove('opacity-100', 'visible', 'scale-100');
        icon.style.transform = 'rotate(0deg)';
        button.setAttribute('aria-expanded', 'false');
      }
      
      button.addEventListener('click', function(e) {
        e.stopPropagation();
        toggleMenu();
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', function(e) {
        if (!button.contains(e.target) && !menu.contains(e.target)) {
          closeMenu();
        }
      });
      
      // Close menu on escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && isOpen) {
          closeMenu();
        }
      });
    }
  });
</script>

<style>
  .country-switcher-menu {
    box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
</style>
